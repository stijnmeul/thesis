<?xml version="1.0" encoding="UTF-8"?>
<bindings 	xmlns="http://www.mozilla.org/xbl" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xbl="http://www.mozilla.org/xbl"	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="dragbox">
		<content extend="xul:hbox"/>
		<implementation>
			<field name="popup">null</field>
			<field name="acceptdrag">this.getAttribute("acceptdrag");</field>
			<field name="drag">this.getAttribute("drag");</field>

			<field name="object">this.firstChild</field>
			<constructor><![CDATA[
				this.popup = document.getElementById("dragbox-popup");
				if(this.popup==null) { // un seul pour tout les dragbox
					this.popup = document.createElement("popup");
					this.popup.setAttribute("id", "dragbox-popup");
					document.documentElement.appendChild(this.popup);
				}
				this.setAttribute("type", this.object.nodeName);
			]]></constructor>
		</implementation>
	</binding>
	<binding id="treedrag" extends="#dragbox">
		<content>
			<xul:image anonid="treedrag-lftcursor" pos="lft" width="3" height="5"/>
			<children/>

			<xul:image anonid="treedrag-ritcursor" pos="rit" width="3" height="5"/>
		</content>
		<implementation>
			<constructor><![CDATA[
				this.createHandlers();
				document.relatedNode = null;
				this.treecols.addEventListener("mousemove", function(event) {
					try {
						if(document.relatedNode!=null) {
							var num = event.currentTarget.parentNode.treeBoxObject.getFirstVisibleRow();
							if(num) event.currentTarget.parentNode.treeBoxObject.ensureRowIsVisible(--num);
						}
					} catch(e) {throw e}
				}, true);
			]]></constructor>
			<field name="treecols">this.getElementsByTagName("treecols")[0];</field>
			<field name="lft">document.getAnonymousElementByAttribute(this, "anonid", "treedrag-lftcursor");</field>
			<field name="rit">document.getAnonymousElementByAttribute(this, "anonid", "treedrag-ritcursor");</field>

			<field name="popuptree">null</field>
			<field name="popuptreechildren">null</field>
			<method name="createHandlers">
				<body><![CDATA[
					document.removeEventListener("mousemove", move, false);
					document.removeEventListener("mouseout", moveout, false);
					document.removeEventListener("mouseup", endMove, false);
					document.removeEventListener("mouseover", outWindow, false);

					document.addEventListener("mousemove", move, false);
					document.addEventListener("mouseout", moveout, false);
					document.addEventListener("mouseup", endMove, false);
					document.addEventListener("mouseover", outWindow, false);
					
					function endMove(event) {
						document.getElementById("dragbox-popup").hidePopup();
						try {
							if(document.relatedNode!=null) {
								var dragbox = event.target;
								while(dragbox.nodeName!="popup"&&dragbox.nodeName!="dragbox"&&dragbox.nodeName!="window") dragbox = dragbox.parentNode;
								if(dragbox.nodeName=="dragbox"&&document.relatedNode.drag==dragbox.acceptdrag) {
									dragbox.showCursors(false);
									var ry = dragbox.getCoordYRowHover(event);

									var evt = dragbox.ownerDocument.createEvent("MutationEvents");
									evt.initMutationEvent("drop", true, true, document.relatedNode, null, null, null, dragbox.getAttribute("accept"));
									evt.clientX = event.clientX;
									evt.clientY = ry+dragbox.object.boxObject.y; // calcul les coord de la ligne avant les curseurs
									evt.screenX = event.screenX;
									evt.screenY = event.screenY;
									dragbox.dispatchEvent(evt);
								}
							}
						} catch(e) {}
						document.relatedNode = null;
					}
					function outWindow(event) {if(event.target.nodeName=="window") endMove(event);}
					function moveout(event) {
						try {
							var dragbox = event.target;
							while(dragbox.nodeName!="popup"&&dragbox.nodeName!="dragbox"&&dragbox.nodeName!="window") dragbox = dragbox.parentNode;
							if(dragbox.nodeName=="dragbox")	{
								dragbox.showCursors(false);
								dragbox.object.currentIndex = -1;
							}
						} catch(e) {}
					}
					function move(event) {
						try {
							var dragbox = event.target;
							var coordX, coordY;
							if(document.relatedNode!=null) {
								document.popupNode = null; // important
								while(dragbox.nodeName!="popup"&&dragbox.nodeName!="dragbox"&&dragbox.nodeName!="window") dragbox = dragbox.parentNode;
								if(dragbox.nodeName=="dragbox"&&document.relatedNode.drag==dragbox.acceptdrag) {
									var row = dragbox.object.treeBoxObject.getRowAt(event.clientX, event.clientY);
									if(row!=-1) dragbox.object.treeBoxObject.ensureRowIsVisible(row);
									dragbox.showCursors(false);
									var y = dragbox.showCursors(true, event);
									coordX = dragbox.boxObject.screenX;
									coordY = (event.screenY-event.clientY)+y+30;
//									coordY = dragbox.boxObject.screenY+y+30;
								} else if(dragbox.nodeName!="popup"){
									document.relatedNode.object.currentIndex = -1;
									document.relatedNode.showCursors(false);
									coordX = event.screenX+30;
									coordY = event.screenY+30;
								} 
								popup = document.getElementById("dragbox-popup");
								if(popup.openPopup) {
									popup.left = coordX;
									popup.top = coordY;
								} else {
									popup.showPopup(document.documentElement, coordX, coordY, "popup", null, null);
								}
							}
						} catch(e) {
							if(document.relatedNode!=null) {
								document.relatedNode.object.currentIndex = -1;
								document.relatedNode.showCursors(false);
							}
							document.getElementById("dragbox-popup").hidePopup();
							document.relatedNode = null;
							throw e;
						}
					}
				]]></body>
			</method>
			<method name="showCursors">
				<parameter name="visible"/>
				<parameter name="event"/>

				<body><![CDATA[
                    					this.removeAttribute("dragging");
                    					this.lft.style.removeProperty("visibility");
                    					this.rit.style.removeProperty("visibility");
                    					this.object.currentIndex = -1;
                    					this.object.treeBoxObject.clearStyleAndImageCaches();
                    					var ry = 0, ay = 0;
                    					if(visible) {
                    						var hl = this.object.treeBoxObject.rowHeight; // hauteur des ligne du "tree"
                    						var hc = this.treecols.boxObject.height; // hauteur des entetes de colonne
                    						var offset = this.object.boxObject.y; // coordonné en y du tree
                    						ry = (Math.round((event.clientY-offset-hc)/hl)*hl)+hc; 
                    						if(ry<hc) ry = hc;
                    						ay = ry + offset;

                    						var row = this.object.treeBoxObject.getRowAt(event.clientX, ay);
                    						
                    						if(row==-1 && ry > hc) {
                                            	var max = this.object.treeBoxObject.getLastVisibleRow() - this.object.treeBoxObject.getFirstVisibleRow();
                                            	if(max>this.object.view.rowCount) max = this.object.view.rowCount; 
                                            	ry = (max*hl)+hc-3;
                                            	this.setAttribute("dragging", "bottom");
                                            	row = this.object.treeBoxObject.getRowAt(event.clientX, ry + offset-6);
                                            } else {
                                            	this.setAttribute("dragging", "top");
                                            }
                    						
                    						this.object.currentIndex=row;
                                            


                    						this.lft.style.setProperty("visibility", "visible", "");
                    						this.rit.style.setProperty("visibility", "visible", "");
                    						this.lft.style.setProperty("background-position", "0px "+ry+"px", "");
                    						this.rit.style.setProperty("background-position", "0px "+ry+"px", "");

                    					}
                    					return ay;
                    //					return ry;
				]]></body>
			</method>
			<method name="getCoordYRowHover">
				<parameter name="event"/>
				<body><![CDATA[
						var hl = this.object.treeBoxObject.rowHeight; // hauteur des ligne du "tree"
						var hc = this.treecols.boxObject.height; // hauteur des entetes de colonne
						var offset = this.object.boxObject.y; // coordonné en y du tree
						var ry = (Math.round((event.clientY-offset-hc)/hl)*hl)+hc; 
						if(ry<hc) ry = hc;						
						return ry;
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="draggesture" phase="capturing"><![CDATA[
				document.popupNode = null; // important
				var numRanges = this.object.view.selection.getRangeCount();
				if(this.drag!=""&&this.getAttribute("disabled")!="true") {
					try {
						this.popup.removeChild(this.popup.firstChild);
					} catch(e) {}
					var col = {};
					this.object.treeBoxObject.getCellAt(event.clientX, event.clientY, {}, col, {});
					if(col.value!=null&&numRanges>0) {
						document.relatedNode = this;
						var popuptree = document.createElement("tree");
						var heightcols = this.treecols.boxObject.height;
						popuptree.style.setProperty("margin-top", (-heightcols)+"px", "important");
						this.popup.appendChild(popuptree);

						popuptree.appendChild(this.treecols.cloneNode(true));
						popuptree.setAttribute("width", this.object.treeBoxObject.width);
						var h = this.object.treeBoxObject.rowHeight;
						popuptree.setAttribute("height", ((this.object.view.selection.count)*h)+2+heightcols);

						var popuptreechildren = document.createElement("treechildren");
						popuptree.appendChild(popuptreechildren);

						var start = new Object();
						var end = new Object();
						var treeitem, treerow, treecell, label;
						var rownum = 0;
						for (var t=0; t < numRanges; t++){
				  		this.object.view.selection.getRangeAt(t,start,end);
				  		
				  		for (var v=start.value; v <= end.value; v++) {
				  			rownum++;
								treeitem = document.createElement("treeitem");
								treerow = document.createElement("treerow");
								treeitem.appendChild(treerow);
								for(var i=0; i< this.object.columns.count; i++) {
									treecell = document.createElement("treecell");
									treecell.setAttribute("label", this.object.view.getCellText(v, this.object.columns.getColumnAt(i)));
									treerow.appendChild(treecell);
								}
								popuptreechildren.appendChild(treeitem);

				  		}
				  	}
						this.showCursors(false);
						var y = this.showCursors(true, event);
						var coordX = this.boxObject.screenX;
						var coordY = (event.screenY-event.clientY)+y+30;
//						var coordY = this.boxObject.screenY+y+30;
						if(this.popup.openPopupAtScreen) {
							this.popup.openPopupAtScreen(coordX, coordY, false);
						} else {
							this.popup.showPopup(this, coordX+3, coordY, "popup", null, null);
						}
//						popuptree.view.selection.selectAll();
					} else document.relatedNode = null;
				} else document.relatedNode = null;
			]]></handler>

			<handler event="drop"><![CDATA[
				var ondrop = this.getAttribute("ondrop"); 
				if(ondrop!="") eval(ondrop);
			]]></handler>
		</handlers>
	</binding>
</bindings>
